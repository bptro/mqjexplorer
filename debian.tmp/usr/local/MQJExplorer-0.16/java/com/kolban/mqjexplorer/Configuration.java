/*
 * Copyright (C) 2012 Marco Ratto
 *
 * This file is part of the project MQJExplorer.
 *
 * MQJExplorer is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * any later version.
 *
 * MQJExplorer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MQJExplorer; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package com.kolban.mqjexplorer;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;

public class Configuration {

	private static Configuration instance;
	private Properties props;
	
	private Configuration() throws ConfigurationException {		
		props = new Properties();
		this.init();
	}
	
	private void init() throws ConfigurationException {
		FileInputStream fis;
		FileOutputStream fos;
		try {
			fos = new FileOutputStream(Constants.PROPS_FILE);
			if (Constants.PROPS_FILE.exists()) {
				fis = new FileInputStream(Constants.PROPS_FILE);
				props.load(fis);				
			}

			if (props.isEmpty()) {
				this.setIntProperty(Keys.MAX_MESSAGES_FOR_BROWSING, Constants.MAX_MESSAGES_FOR_BROWSING);
				props.store(fos, "Autogenerated");
			}
			
		} catch (FileNotFoundException e) {
			throw new ConfigurationException(e);
		} catch (IOException e) {
			throw new ConfigurationException(e);
		}

	}

	public static Configuration getInstance() throws ConfigurationException {
		if (instance == null) {
			instance = new Configuration();
		}
		return instance;
	}		
	
	public int getMaxMessagesForBrowsing() {
		return this.getIntProperty(Keys.MAX_MESSAGES_FOR_BROWSING, Constants.MAX_MESSAGES_FOR_BROWSING);
	}
	
	  /**
	   * Il metodo restituisce il valore della property di formato <code>String</code> identificata dal parametro <code>key</code>. Se la property non esiste, il metodo ritorna <code>null</code>.
	   * @param String key
	   * @return String
	   */
	private String getStringProperty(String key) {
	    return props.getProperty(key);
	  }

	  /**
	   * Il metodo restituisce il valore della property di formato <code>String</code> identificata dal parametro <code>key</code>. Se la property non esiste, il metodo ritorna il parametro <code>defaultValue</code>.
	   * @param String key
	   * @param String defaultValue
	   * @return String
	   */
	private String getStringProperty(String key, String defaultValue) {
	    return props.getProperty(key, defaultValue);
	  }

	  /**
	   * Imposta una nella properties una coppia <code>(key,value)</code>, con <code>value</code> di tipo <code>String</code>.
	   * @throws EccezioneGrave
	   * @param String key
	   * @param String value
	   */
	private void setStringProperty(String key, String value) {
	    props.setProperty(key, value);
	  }

	  /**
	   * Il metodo restituisce il valore della property identificata dal parametro <code>key</code> nel formato <code>int</code>. Se la property non esiste, il metodo ritorna il parametro <code>defaultValue</code>.
	   * @param String key
	   * @param int defaultValue
	   * @return int
	   */
	private int getIntProperty(String key, int defaultValue) {
	    int value = -1;
	    String s = this.getStringProperty(key, null);

	    try {
	      value = Integer.parseInt(s);
	    }
	    catch (Exception nfe) {
	      value = defaultValue;
	    }
	    return value;
	  }

	  /**
	   * Imposta una nella properties una coppia <code>(key,value)</code>, con <code>value</code> di tipo <code>int</code>.
	   * @param String key
	   * @param int value
	   */
	private void setIntProperty(String key, int value) {
	    this.setStringProperty(key, "" + value);
	  }

	  /**
	   * Il metodo restituisce il valore della property identificata dal parametro <code>key</code> nel formato <code>long</code>. Se la property non esiste, il metodo ritorna il parametro <code>defaultValue</code>.
	   * @param String key
	   * @param long defaultValue
	   * @return long
	   */
	private long getLongProperty(String key, long defaultValue) {
	    long value = -1;
	    String s = this.getStringProperty(key, null);

	    try {
	      value = Long.parseLong(s);
	    } catch (Exception nfe) {
	      value = defaultValue;
	    }
	    return value;
	  }

	  /**
	   * Imposta una nella properties una coppia <code>(key, value)</code>, con <code>value</code> di tipo <code>long</code>.
	   * @param String key
	   * @param long value*/
	private void setLongProperty(String key, long value) {
	    this.setStringProperty(key, "" + value);
	  }

	  /**
	   * Il metodo restituisce il valore della property identificata dal parametro <code>key</code> nel formato <code>double</code>. Se la property non esiste, il metodo ritorna il parametro <code>defaultValue</code>.
	   * @param String key
	   * @param double defaultValue
	   * @return double
	   */
	  private double getDoubleProperty(String key, double defaultValue) {
	    double value = -1;
	    String s = this.getStringProperty(key, null);

	    try {
	      value = Double.parseDouble(s);
	    }
	    catch (Exception nfe) {
	      value = defaultValue;
	    }
	    return value;
	  }

	  /**
	   * Imposta una nella properties una coppia <code>(key, value)</code>, con <code>value</code> di tipo <code>double</code>.
	   * @param String key
	   * @param double value
	   */
	  private void setDoubleProperty(String key, double value) {
	    this.setStringProperty(key, "" + value);
	  }

	  /**
	   * Il metodo restituisce il valore della property identificata dal parametro <code>key</code> nel formato <code>boolean</code>. Se la property non esiste, il metodo ritorna il parametro <code>defaultValue</code>.
	   * @param String key
	   * @param boolean defaultValue
	   * @return boolean
	   */
	  private boolean getBooleanProperty(String key, boolean defaultValue) {
	    boolean value = false;
	    String s = this.getStringProperty(key, null);

	    try {
	      value = s.trim().toLowerCase().equals("true");
	    } catch (Exception e) {
	      value = defaultValue;
	    }
	    return value;
	  }

	  /**
	   * Imposta una nella properties una coppia <code>(key, value)</code>, con <code>value</code> di tipo <code>boolean</code>.
	   * @param String key
	   * @param boolean value
	   */
	  private void setBooleanProperty(String key, boolean value) {
	    this.setStringProperty(key, "" + value);
	  }

	  class Keys {
		  final static String MAX_MESSAGES_FOR_BROWSING = "MaxMessagesForBrowsing";
	  }
}
